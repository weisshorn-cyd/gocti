name: validate
on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read

jobs:
  validate-opencti-version:
    name: opencti-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Get OpenCTI versions
        run: |
          # Version of docker compose
          COMPOSE_VERSION=$(sed -n 's/.*opencti\/platform:\(.*\)$/\1/p' ./docker-compose.yml | head -1)
          echo "COMPOSE_VERSION=$COMPOSE_VERSION" >> "$GITHUB_ENV"
          echo "COMPOSE@$COMPOSE_VERSION"
          # First and last range from the README
          versions=$(echo "$line" | sed -nE 's/.*OpenCTI version ([0-9]+\.[0-9]+\.[0-9]+)([[:space:]]*-[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+))?.*/\1 \3/p' ./README.md)
          read FIRST_VERSION LAST_VERSION <<< "$versions"
          # If LAST_VERSION is empty (not a range), set it equal to FIRST_VERSION
          if [ -z "$LAST_VERSION" ]; then
            LAST_VERSION="$FIRST_VERSION"
          fi
          echo "FIRST_VERSION=$FIRST_VERSION" >> "$GITHUB_ENV"
          echo "FIRST@$FIRST_VERSION"
          echo "LAST_VERSION=$LAST_VERSION" >> "$GITHUB_ENV"
          echo "LAST@$LAST_VERSION"

      - name: Validate pycti
        run: |
          PYCTI_VERSION=$(sed -n 's/.*pycti==\(.*\)".*/\1/p' tools/gocti_type_generator/pyproject.toml | head -1)
          if [ "$PYCTI_VERSION" != "$FIRST_VERSION" ]; then
            echo "pycti is at $PYCTI_VERSION but target OpenCTI is $FIRST_VERSION"
            exit 1
          fi

      - name: Validate generated files
        run: |
          for file in $(find -P ./ -type f -name "*.go"); do
            has_generation=$(sed -n 's/.*Code generated by '\''\/tools\/gocti_type_generator'\'' \(.*\)$/\1/p' $file)
            if [ -n "$has_generation" ] && [[ "$has_generation" != "for OpenCTI version "* ]]; then
              echo "$file was generated but is missing version info"
              exit 1
            fi
            generated=$(sed -n 's/.*version \(.*\) - DO.*/\1/p' $file)
            if [ -n "$generated" ] && [ "$generated" != "$FIRST_VERSION" ]; then
              echo "$file generated for $generated but target is $FIRST_VERSION"
              exit 1
            fi
          done

      - name: Validate README
        run: |
          if [ "$LAST_VERSION" != "$COMPOSE_VERSION" ]; then
            echo "README last version is $LAST_VERSION and but docker compose is $COMPOSE_VERSION"
            exit 1
          fi
          if [ "$(printf "%s\n%s" "$FIRST_VERSION" "$LAST_VERSION" | sort -V | head -n1)" != "$FIRST_VERSION" ]; then
            echo "$FIRST_VERSION is not below $LAST_VERSION"
            exit 1
          fi

      - name: Validate CHANGELOG
        run: |
          CHANGELOG_VERSION=$(sed -nE 's/^- Support OpenCTI version ([0-9]+\.[0-9]+\.[0-9]+).*/\1/p' ./CHANGELOG.md | head -1)
          if [ -z "$CHANGELOG_VERSION" ]; then
            echo "CHANGELOG is missing target OpenCTI version information"
            exit 1
          fi
          if [ "$CHANGELOG_VERSION" != "$COMPOSE_VERSION" ]; then
            echo "CHANGELOG mentions version $CHANGELOG_VERSION as latest supported OpenCTI version and not $COMPOSE_VERSION"
            exit 1
          fi

  validate-gocti-version:
    name: gocti-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Find latest version in changelog
        run: |
          STAGED=$(sed -En "s/^\#\# \[(.*)\] \- [0-9]{4}\-[0-9]{2}\-[0-9]{2}$/\1/p" ./CHANGELOG.md | head -1)
          if [ -z $STAGED ]; then
            echo "Could not find latest version in changelog"
            exit 1
          fi
          echo "STAGED_VERSION=$STAGED" >> "$GITHUB_ENV"
          echo "Latest version in changelog: v$STAGED"

      - name: Validate current application version
        run: |
          APP=$(sed -n 's/\tgoctiVersion = "\([0-9]*.[0-9]*.[0-9]*\)"$/\1/p' ./gocti.go | head -1)
          if [ "$APP" != "$STAGED_VERSION" ]; then
            echo "Mismatch between latest version in changelog $STAGED_VERSION and app version in gocti.go $APP"
            exit 1
          fi

      - name: Validate current generator version
        run: |
          GENERATOR=$(sed -n 's/^version = "\([0-9]*.[0-9]*.[0-9]*\)"$/\1/p' ./tools/gocti_type_generator/pyproject.toml | head -1)
          if [ "$GENERATOR" != "$STAGED_VERSION" ]; then
            echo "Mismatch between latest version in changelog $STAGED_VERSION and generator version in gocti_type_generator/pyproject.toml $GENERATOR"
            exit 1
          fi

  validate-changelog:
    name: changelog
    if:  github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Validate changelog
        uses: zattoo/changelog@0525217de980f73281de086cb7a6930c230b7ab8 # v2.0.0
        with:
          token: ${{github.token}}
          exclude: '.github/, .ruff_cache/, .venv/'
          release_branches: ''
