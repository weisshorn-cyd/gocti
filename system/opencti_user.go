// Code generated by '/tools/gocti_type_generator' for OpenCTI version 6.7.12 - DO NOT EDIT.

package system

import (
	"fmt"
	"time"

	"github.com/weisshorn-cyd/gocti/graphql"

	_ "embed"
)

type User struct {
	graphql.User `gocti:",squash"`
}

//go:embed default_properties/user_default_properties.txt
var userDefaultProperties string

func (u User) DefaultProperties() string {
	return userDefaultProperties
}

// Implementing the [api.ListableEntity] interface.

//go:embed list_queries/user_list_query.txt
var userListQueryString string

func (u User) ListQueryString(customAttributes string) string {
	return fmt.Sprintf(
		userListQueryString,
		customAttributes,
	)
}

func (u User) ListResponseField() string { return "users" }

// Implementing the [api.ReadableEntity] interface.

func (u User) ReadQueryString(customAttributes string) string {
	return fmt.Sprintf(
		`query ($id: String!) {
            user (id: $id) {%s}
        }`,
		customAttributes,
	)
}

func (u User) ReadResponseField() string { return "user" }

// Implementing the [api.CreatableEntity] interface.

func (u User) CreateQueryString(customAttributes string) string {
	return fmt.Sprintf(
		`mutation ($input: UserAddInput!) {
            userAdd (input: $input) {%s}
        }`,
		customAttributes,
	)
}

func (u User) CreateResponseField() string { return "userAdd" }

// UserAddInput represents a GraphQL INPUT_OBJECT
// Some fields from the OpenCTI schema may be missing
// (See the examples for ways to expand an existing type).
type UserAddInput struct {
	// UserAddInput
	UserEmail            string                       `gocti:"user_email"              json:"user_email,omitempty"`
	Name                 string                       `gocti:"name"                    json:"name,omitempty"`
	Password             string                       `gocti:"password"                json:"password,omitempty"`
	Firstname            string                       `gocti:"firstname"               json:"firstname,omitempty"`
	Lastname             string                       `gocti:"lastname"                json:"lastname,omitempty"`
	Description          string                       `gocti:"description"             json:"description,omitempty"`
	Language             string                       `gocti:"language"                json:"language,omitempty"`
	Theme                string                       `gocti:"theme"                   json:"theme,omitempty"`
	ObjectOrganization   []string                     `gocti:"objectOrganization"      json:"objectOrganization,omitempty"`
	AccountStatus        string                       `gocti:"account_status"          json:"account_status,omitempty"`
	AccountLockAfterDate *time.Time                   `gocti:"account_lock_after_date" json:"account_lock_after_date,omitempty"`
	UnitSystem           string                       `gocti:"unit_system"             json:"unit_system,omitempty"`
	SubmenuShowIcons     bool                         `gocti:"submenu_show_icons"      json:"submenu_show_icons,omitempty"`
	SubmenuAutoCollapse  bool                         `gocti:"submenu_auto_collapse"   json:"submenu_auto_collapse,omitempty"`
	MonochromeLabels     bool                         `gocti:"monochrome_labels"       json:"monochrome_labels,omitempty"`
	Groups               []string                     `gocti:"groups"                  json:"groups,omitempty"`
	UserConfidenceLevel  graphql.ConfidenceLevelInput `gocti:"user_confidence_level"   json:"user_confidence_level,omitempty"`
	PreventDefaultGroups bool                         `gocti:"prevent_default_groups"  json:"prevent_default_groups,omitempty"`
	EmailTemplateID      string                       `gocti:"email_template_id"       json:"email_template_id,omitempty"`
}

func (input UserAddInput) Input() (map[string]any, error) {
	return map[string]any{
		"input": input,
	}, nil
}

// Implementing the [api.DeletableEntity] interface.

func (u User) DeleteQueryString() string {
	return `mutation ($id: ID!) {
                userEdit (id: $id) {
                    delete
                }
            }`
}

func (u User) DeleteResponseField() string { return "userEdit" }
