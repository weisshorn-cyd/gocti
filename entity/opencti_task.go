// Code generated by '/tools/gocti_type_generator' for OpenCTI version 6.7.12 - DO NOT EDIT.

package entity

import (
	"fmt"
	"time"

	"github.com/weisshorn-cyd/gocti/graphql"

	_ "embed"
)

type Task struct {
	graphql.Task `gocti:",squash"`
}

//go:embed default_properties/task_default_properties.txt
var taskDefaultProperties string

func (t Task) DefaultProperties() string {
	return taskDefaultProperties
}

// Implementing the [api.ListableEntity] interface.

//go:embed list_queries/task_list_query.txt
var taskListQueryString string

func (t Task) ListQueryString(customAttributes string) string {
	return fmt.Sprintf(
		taskListQueryString,
		customAttributes,
	)
}

func (t Task) ListResponseField() string { return "tasks" }

// Implementing the [api.ReadableEntity] interface.

func (t Task) ReadQueryString(customAttributes string) string {
	return fmt.Sprintf(
		`query ($id: String!) {
            task (id: $id) {%s}
        }`,
		customAttributes,
	)
}

func (t Task) ReadResponseField() string { return "task" }

// Implementing the [api.CreatableEntity] interface.

func (t Task) CreateQueryString(customAttributes string) string {
	return fmt.Sprintf(
		`mutation ($input: TaskAddInput!) {
            taskAdd (input: $input) {%s}
        }`,
		customAttributes,
	)
}

func (t Task) CreateResponseField() string { return "taskAdd" }

// TaskAddInput represents a GraphQL INPUT_OBJECT
// Some fields from the OpenCTI schema may be missing
// (See the examples for ways to expand an existing type).
type TaskAddInput struct {
	// TaskAddInput
	Name               string     `gocti:"name"                  json:"name,omitempty"`
	Description        string     `gocti:"description"           json:"description,omitempty"`
	Created            *time.Time `gocti:"created"               json:"created,omitempty"`
	DueDate            *time.Time `gocti:"due_date"              json:"due_date,omitempty"`
	ObjectAssignee     []string   `gocti:"objectAssignee"        json:"objectAssignee,omitempty"`
	ObjectParticipant  []string   `gocti:"objectParticipant"     json:"objectParticipant,omitempty"`
	ObjectLabel        []string   `gocti:"objectLabel"           json:"objectLabel,omitempty"`
	ObjectMarking      []string   `gocti:"objectMarking"         json:"objectMarking,omitempty"`
	ObjectOrganization []string   `gocti:"objectOrganization"    json:"objectOrganization,omitempty"`
	CreatedBy          string     `gocti:"createdBy"             json:"createdBy,omitempty"`
	Objects            []string   `gocti:"objects"               json:"objects,omitempty"`
	XOpenctiWorkflowID string     `gocti:"x_opencti_workflow_id" json:"x_opencti_workflow_id,omitempty"`
	Update             bool       `gocti:"update"                json:"update,omitempty"`
}

func (input TaskAddInput) Input() (map[string]any, error) {
	return map[string]any{
		"input": input,
	}, nil
}

// Implementing the [api.DeletableEntity] interface.

func (t Task) DeleteQueryString() string {
	return `mutation ($id: ID!) {
                taskDelete (id: $id)
            }`
}

func (t Task) DeleteResponseField() string { return "taskDelete" }
