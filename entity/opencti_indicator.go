// Code generated by '/tools/gocti_type_generator' for OpenCTI version 6.7.12 - DO NOT EDIT.

package entity

import (
	"fmt"
	"time"

	"github.com/weisshorn-cyd/gocti/graphql"

	_ "embed"
)

type Indicator struct {
	graphql.Indicator `gocti:",squash"`
}

//go:embed default_properties/indicator_default_properties.txt
var indicatorDefaultProperties string

func (i Indicator) DefaultProperties() string {
	return indicatorDefaultProperties
}

// Implementing the [api.ListableEntity] interface.

//go:embed list_queries/indicator_list_query.txt
var indicatorListQueryString string

func (i Indicator) ListQueryString(customAttributes string) string {
	return fmt.Sprintf(
		indicatorListQueryString,
		customAttributes,
	)
}

func (i Indicator) ListResponseField() string { return "indicators" }

// Implementing the [api.ReadableEntity] interface.

func (i Indicator) ReadQueryString(customAttributes string) string {
	return fmt.Sprintf(
		`query ($id: String!) {
            indicator (id: $id) {%s}
        }`,
		customAttributes,
	)
}

func (i Indicator) ReadResponseField() string { return "indicator" }

// Implementing the [api.CreatableEntity] interface.

func (i Indicator) CreateQueryString(customAttributes string) string {
	return fmt.Sprintf(
		`mutation ($input: IndicatorAddInput!) {
            indicatorAdd (input: $input) {%s}
        }`,
		customAttributes,
	)
}

func (i Indicator) CreateResponseField() string { return "indicatorAdd" }

// IndicatorAddInput represents a GraphQL INPUT_OBJECT
// Some fields from the OpenCTI schema may be missing
// (See the examples for ways to expand an existing type).
type IndicatorAddInput struct {
	// IndicatorAddInput
	StixID                     string                  `gocti:"stix_id"                        json:"stix_id,omitempty"`
	XOpenctiStixIDs            []string                `gocti:"x_opencti_stix_ids"             json:"x_opencti_stix_ids,omitempty"`
	PatternType                graphql.PatternType     `gocti:"pattern_type"                   json:"pattern_type,omitempty"`
	PatternVersion             string                  `gocti:"pattern_version"                json:"pattern_version,omitempty"`
	Pattern                    string                  `gocti:"pattern"                        json:"pattern,omitempty"`
	Name                       string                  `gocti:"name"                           json:"name,omitempty"`
	Description                string                  `gocti:"description"                    json:"description,omitempty"`
	IndicatorTypes             []graphql.IndicatorType `gocti:"indicator_types"                json:"indicator_types,omitempty"`
	ValidFrom                  *time.Time              `gocti:"valid_from"                     json:"valid_from,omitempty"`
	ValidUntil                 *time.Time              `gocti:"valid_until"                    json:"valid_until,omitempty"`
	Confidence                 int                     `gocti:"confidence"                     json:"confidence,omitempty"`
	Revoked                    bool                    `gocti:"revoked"                        json:"revoked,omitempty"`
	Lang                       string                  `gocti:"lang"                           json:"lang,omitempty"`
	XOpenctiScore              int                     `gocti:"x_opencti_score"                json:"x_opencti_score,omitempty"`
	XOpenctiDetection          bool                    `gocti:"x_opencti_detection"            json:"x_opencti_detection,omitempty"`
	XOpenctiMainObservableType string                  `gocti:"x_opencti_main_observable_type" json:"x_opencti_main_observable_type,omitempty"`
	XMitrePlatforms            []graphql.Platform      `gocti:"x_mitre_platforms"              json:"x_mitre_platforms,omitempty"`
	KillChainPhases            []string                `gocti:"killChainPhases"                json:"killChainPhases,omitempty"`
	CreatedBy                  string                  `gocti:"createdBy"                      json:"createdBy,omitempty"`
	ObjectMarking              []string                `gocti:"objectMarking"                  json:"objectMarking,omitempty"`
	ObjectLabel                []string                `gocti:"objectLabel"                    json:"objectLabel,omitempty"`
	ObjectOrganization         []string                `gocti:"objectOrganization"             json:"objectOrganization,omitempty"`
	ExternalReferences         []string                `gocti:"externalReferences"             json:"externalReferences,omitempty"`
	Created                    *time.Time              `gocti:"created"                        json:"created,omitempty"`
	Modified                   *time.Time              `gocti:"modified"                       json:"modified,omitempty"`
	ClientMutationID           string                  `gocti:"clientMutationId"               json:"clientMutationId,omitempty"`
	Update                     bool                    `gocti:"update"                         json:"update,omitempty"`
	CreateObservables          bool                    `gocti:"createObservables"              json:"createObservables,omitempty"`
	XOpenctiWorkflowID         string                  `gocti:"x_opencti_workflow_id"          json:"x_opencti_workflow_id,omitempty"`
	File                       []byte                  `gocti:"file"                           json:"file,omitempty"`
	BasedOn                    []string                `gocti:"basedOn"                        json:"basedOn,omitempty"`
}

func (input IndicatorAddInput) Input() (map[string]any, error) {
	return map[string]any{
		"input": input,
	}, nil
}

// Implementing the [api.DeletableEntity] interface.

func (i Indicator) DeleteQueryString() string {
	return `mutation ($id: ID!) {
                indicatorDelete (id: $id)
            }`
}

func (i Indicator) DeleteResponseField() string { return "indicatorDelete" }
