// Code generated by '/tools/gocti_type_generator' for OpenCTI version 6.7.12 - DO NOT EDIT.

package entity

import (
	"fmt"
	"time"

	"github.com/weisshorn-cyd/gocti/graphql"

	_ "embed"
)

type Opinion struct {
	graphql.Opinion `gocti:",squash"`
}

//go:embed default_properties/opinion_default_properties.txt
var opinionDefaultProperties string

func (o Opinion) DefaultProperties() string {
	return opinionDefaultProperties
}

// Implementing the [api.ListableEntity] interface.

//go:embed list_queries/opinion_list_query.txt
var opinionListQueryString string

func (o Opinion) ListQueryString(customAttributes string) string {
	return fmt.Sprintf(
		opinionListQueryString,
		customAttributes,
	)
}

func (o Opinion) ListResponseField() string { return "opinions" }

// Implementing the [api.ReadableEntity] interface.

func (o Opinion) ReadQueryString(customAttributes string) string {
	return fmt.Sprintf(
		`query ($id: String) {
            opinion (id: $id) {%s}
        }`,
		customAttributes,
	)
}

func (o Opinion) ReadResponseField() string { return "opinion" }

// Implementing the [api.CreatableEntity] interface.

func (o Opinion) CreateQueryString(customAttributes string) string {
	return fmt.Sprintf(
		`mutation ($input: OpinionAddInput!) {
            opinionAdd (input: $input) {%s}
        }`,
		customAttributes,
	)
}

func (o Opinion) CreateResponseField() string { return "opinionAdd" }

// OpinionAddInput represents a GraphQL INPUT_OBJECT
// Some fields from the OpenCTI schema may be missing
// (See the examples for ways to expand an existing type).
type OpinionAddInput struct {
	// OpinionAddInput
	StixID             string              `gocti:"stix_id"               json:"stix_id,omitempty"`
	XOpenctiStixIDs    []string            `gocti:"x_opencti_stix_ids"    json:"x_opencti_stix_ids,omitempty"`
	Opinion            graphql.OpinionType `gocti:"opinion"               json:"opinion,omitempty"`
	Explanation        string              `gocti:"explanation"           json:"explanation,omitempty"`
	Authors            []string            `gocti:"authors"               json:"authors,omitempty"`
	Revoked            bool                `gocti:"revoked"               json:"revoked,omitempty"`
	Lang               string              `gocti:"lang"                  json:"lang,omitempty"`
	Confidence         int                 `gocti:"confidence"            json:"confidence,omitempty"`
	CreatedBy          string              `gocti:"createdBy"             json:"createdBy,omitempty"`
	ObjectMarking      []string            `gocti:"objectMarking"         json:"objectMarking,omitempty"`
	ObjectOrganization []string            `gocti:"objectOrganization"    json:"objectOrganization,omitempty"`
	ObjectLabel        []string            `gocti:"objectLabel"           json:"objectLabel,omitempty"`
	ExternalReferences []string            `gocti:"externalReferences"    json:"externalReferences,omitempty"`
	Objects            []string            `gocti:"objects"               json:"objects,omitempty"`
	Created            *time.Time          `gocti:"created"               json:"created,omitempty"`
	Modified           *time.Time          `gocti:"modified"              json:"modified,omitempty"`
	Update             bool                `gocti:"update"                json:"update,omitempty"`
	XOpenctiWorkflowID string              `gocti:"x_opencti_workflow_id" json:"x_opencti_workflow_id,omitempty"`
	ClientMutationID   string              `gocti:"clientMutationId"      json:"clientMutationId,omitempty"`
	File               []byte              `gocti:"file"                  json:"file,omitempty"`
}

func (input OpinionAddInput) Input() (map[string]any, error) {
	return map[string]any{
		"input": input,
	}, nil
}

// Implementing the [api.DeletableEntity] interface.

func (o Opinion) DeleteQueryString() string {
	return `mutation ($id: ID!) {
                opinionEdit (id: $id) {
                    delete
                }
            }`
}

func (o Opinion) DeleteResponseField() string { return "opinionEdit" }
