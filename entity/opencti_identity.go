// Code generated by '/tools/gocti_type_generator' for OpenCTI version 6.7.12 - DO NOT EDIT.

package entity

import (
	"fmt"
	"time"

	"github.com/weisshorn-cyd/gocti/graphql"

	_ "embed"
)

type Identity struct {
	graphql.Identity `gocti:",squash"`
}

//go:embed default_properties/identity_default_properties.txt
var identityDefaultProperties string

func (i Identity) DefaultProperties() string {
	return identityDefaultProperties
}

// Implementing the [api.ListableEntity] interface.

//go:embed list_queries/identity_list_query.txt
var identityListQueryString string

func (i Identity) ListQueryString(customAttributes string) string {
	return fmt.Sprintf(
		identityListQueryString,
		customAttributes,
	)
}

func (i Identity) ListResponseField() string { return "identities" }

// Implementing the [api.ReadableEntity] interface.

func (i Identity) ReadQueryString(customAttributes string) string {
	return fmt.Sprintf(
		`query ($id: String!) {
            identity (id: $id) {%s}
        }`,
		customAttributes,
	)
}

func (i Identity) ReadResponseField() string { return "identity" }

// Implementing the [api.CreatableEntity] interface.

func (i Identity) CreateQueryString(customAttributes string) string {
	return fmt.Sprintf(
		`mutation ($input: IdentityAddInput!) {
            identityAdd (input: $input) {%s}
        }`,
		customAttributes,
	)
}

func (i Identity) CreateResponseField() string { return "identityAdd" }

// IdentityAddInput represents a GraphQL INPUT_OBJECT
// Some fields from the OpenCTI schema may be missing
// (See the examples for ways to expand an existing type).
type IdentityAddInput struct {
	// IdentityAddInput
	StixID             string               `gocti:"stix_id"               json:"stix_id,omitempty"`
	XOpenctiStixIDs    []string             `gocti:"x_opencti_stix_ids"    json:"x_opencti_stix_ids,omitempty"`
	Type               graphql.IdentityType `gocti:"type"                  json:"type,omitempty"`
	Name               string               `gocti:"name"                  json:"name,omitempty"`
	Description        string               `gocti:"description"           json:"description,omitempty"`
	ContactInformation string               `gocti:"contact_information"   json:"contact_information,omitempty"`
	Roles              []string             `gocti:"roles"                 json:"roles,omitempty"`
	XOpenctiAliases    []string             `gocti:"x_opencti_aliases"     json:"x_opencti_aliases,omitempty"`
	Confidence         int                  `gocti:"confidence"            json:"confidence,omitempty"`
	Revoked            bool                 `gocti:"revoked"               json:"revoked,omitempty"`
	Lang               string               `gocti:"lang"                  json:"lang,omitempty"`
	CreatedBy          string               `gocti:"createdBy"             json:"createdBy,omitempty"`
	ObjectMarking      []string             `gocti:"objectMarking"         json:"objectMarking,omitempty"`
	ObjectLabel        []string             `gocti:"objectLabel"           json:"objectLabel,omitempty"`
	ExternalReferences []string             `gocti:"externalReferences"    json:"externalReferences,omitempty"`
	XOpenctiWorkflowID string               `gocti:"x_opencti_workflow_id" json:"x_opencti_workflow_id,omitempty"`
	ClientMutationID   string               `gocti:"clientMutationId"      json:"clientMutationId,omitempty"`
	Created            *time.Time           `gocti:"created"               json:"created,omitempty"`
	Modified           *time.Time           `gocti:"modified"              json:"modified,omitempty"`
	Update             bool                 `gocti:"update"                json:"update,omitempty"`
}

func (input IdentityAddInput) Input() (map[string]any, error) {
	return map[string]any{
		"input": input,
	}, nil
}

// Implementing the [api.DeletableEntity] interface.

func (i Identity) DeleteQueryString() string {
	return `mutation ($id: ID!) {
                identityEdit (id: $id) {
                    delete
                }
            }`
}

func (i Identity) DeleteResponseField() string { return "identityEdit" }
