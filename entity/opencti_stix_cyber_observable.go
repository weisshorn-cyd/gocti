// Code generated by '/tools/gocti_type_generator' for OpenCTI version 6.7.12 - DO NOT EDIT.

package entity

import (
	"fmt"

	"github.com/goccy/go-json"

	"github.com/weisshorn-cyd/gocti/graphql"

	_ "embed"
)

type StixCyberObservable struct {
	graphql.StixCyberObservable `gocti:",squash"`
}

//go:embed default_properties/stix_cyber_observable_default_properties.txt
var stixCyberObservableDefaultProperties string

func (s StixCyberObservable) DefaultProperties() string {
	return stixCyberObservableDefaultProperties
}

// Implementing the [api.ListableEntity] interface.

//go:embed list_queries/stix_cyber_observable_list_query.txt
var stixCyberObservableListQueryString string

func (s StixCyberObservable) ListQueryString(customAttributes string) string {
	return fmt.Sprintf(
		stixCyberObservableListQueryString,
		customAttributes,
	)
}

func (s StixCyberObservable) ListResponseField() string { return "stixCyberObservables" }

// Implementing the [api.ReadableEntity] interface.

func (s StixCyberObservable) ReadQueryString(customAttributes string) string {
	return fmt.Sprintf(
		`query ($id: String!) {
            stixCyberObservable (id: $id) {%s}
        }`,
		customAttributes,
	)
}

func (s StixCyberObservable) ReadResponseField() string { return "stixCyberObservable" }

// Implementing the [api.CreatableEntity] interface.

//go:embed create_queries/stix_cyber_observable_create_query.txt
var stixCyberObservableCreateQueryString string

func (s StixCyberObservable) CreateQueryString(customAttributes string) string {
	return fmt.Sprintf(
		stixCyberObservableCreateQueryString,
		customAttributes,
	)
}

func (s StixCyberObservable) CreateResponseField() string { return "stixCyberObservableAdd" }

type StixCyberObservableAddInput struct {
	// StixCyberObservableAddInput
	Type                     graphql.StixCyberObservableType          `gocti:"type"                     json:"type,omitempty"`
	StixID                   string                                   `gocti:"stix_id"                  json:"stix_id,omitempty"`
	XOpenctiScore            int                                      `gocti:"x_opencti_score"          json:"x_opencti_score,omitempty"`
	XOpenctiDescription      string                                   `gocti:"x_opencti_description"    json:"x_opencti_description,omitempty"`
	CreateIndicator          bool                                     `gocti:"createIndicator"          json:"createIndicator,omitempty"`
	CreatedBy                string                                   `gocti:"createdBy"                json:"createdBy,omitempty"`
	ObjectMarking            []string                                 `gocti:"objectMarking"            json:"objectMarking,omitempty"`
	ObjectLabel              []string                                 `gocti:"objectLabel"              json:"objectLabel,omitempty"`
	ObjectOrganization       []string                                 `gocti:"objectOrganization"       json:"objectOrganization,omitempty"`
	ExternalReferences       []string                                 `gocti:"externalReferences"       json:"externalReferences,omitempty"`
	ClientMutationID         string                                   `gocti:"clientMutationId"         json:"clientMutationId,omitempty"`
	Update                   bool                                     `gocti:"update"                   json:"update,omitempty"`
	AutonomousSystem         graphql.AutonomousSystemAddInput         `gocti:"AutonomousSystem"         json:"AutonomousSystem,omitempty"`
	Directory                graphql.DirectoryAddInput                `gocti:"Directory"                json:"Directory,omitempty"`
	DomainName               graphql.DomainNameAddInput               `gocti:"DomainName"               json:"DomainName,omitempty"`
	EmailAddr                graphql.EmailAddrAddInput                `gocti:"EmailAddr"                json:"EmailAddr,omitempty"`
	EmailMessage             graphql.EmailMessageAddInput             `gocti:"EmailMessage"             json:"EmailMessage,omitempty"`
	EmailMimePartType        graphql.EmailMimePartTypeAddInput        `gocti:"EmailMimePartType"        json:"EmailMimePartType,omitempty"`
	Artifact                 graphql.ArtifactAddInput                 `gocti:"Artifact"                 json:"Artifact,omitempty"`
	StixFile                 graphql.StixFileAddInput                 `gocti:"StixFile"                 json:"StixFile,omitempty"`
	X509Certificate          graphql.X509CertificateAddInput          `gocti:"X509Certificate"          json:"X509Certificate,omitempty"`
	IPv4Addr                 graphql.IPv4AddrAddInput                 `gocti:"IPv4Addr"                 json:"IPv4Addr,omitempty"`
	IPv6Addr                 graphql.IPv6AddrAddInput                 `gocti:"IPv6Addr"                 json:"IPv6Addr,omitempty"`
	MacAddr                  graphql.MacAddrAddInput                  `gocti:"MacAddr"                  json:"MacAddr,omitempty"`
	Mutex                    graphql.MutexAddInput                    `gocti:"Mutex"                    json:"Mutex,omitempty"`
	NetworkTraffic           graphql.NetworkTrafficAddInput           `gocti:"NetworkTraffic"           json:"NetworkTraffic,omitempty"`
	Process                  graphql.ProcessAddInput                  `gocti:"Process"                  json:"Process,omitempty"`
	Software                 graphql.SoftwareAddInput                 `gocti:"Software"                 json:"Software,omitempty"`
	URL                      graphql.URLAddInput                      `gocti:"Url"                      json:"Url,omitempty"`
	UserAccount              graphql.UserAccountAddInput              `gocti:"UserAccount"              json:"UserAccount,omitempty"`
	WindowsRegistryKey       graphql.WindowsRegistryKeyAddInput       `gocti:"WindowsRegistryKey"       json:"WindowsRegistryKey,omitempty"`
	WindowsRegistryValueType graphql.WindowsRegistryValueTypeAddInput `gocti:"WindowsRegistryValueType" json:"WindowsRegistryValueType,omitempty"`
	CryptographicKey         graphql.CryptographicKeyAddInput         `gocti:"CryptographicKey"         json:"CryptographicKey,omitempty"`
	CryptocurrencyWallet     graphql.CryptocurrencyWalletAddInput     `gocti:"CryptocurrencyWallet"     json:"CryptocurrencyWallet,omitempty"`
	Hostname                 graphql.HostnameAddInput                 `gocti:"Hostname"                 json:"Hostname,omitempty"`
	Text                     graphql.TextAddInput                     `gocti:"Text"                     json:"Text,omitempty"`
	UserAgent                graphql.UserAgentAddInput                `gocti:"UserAgent"                json:"UserAgent,omitempty"`
	BankAccount              graphql.BankAccountAddInput              `gocti:"BankAccount"              json:"BankAccount,omitempty"`
	Credential               graphql.CredentialAddInput               `gocti:"Credential"               json:"Credential,omitempty"`
	TrackingNumber           graphql.TrackingNumberAddInput           `gocti:"TrackingNumber"           json:"TrackingNumber,omitempty"`
	PhoneNumber              graphql.PhoneNumberAddInput              `gocti:"PhoneNumber"              json:"PhoneNumber,omitempty"`
	PaymentCard              graphql.PaymentCardAddInput              `gocti:"PaymentCard"              json:"PaymentCard,omitempty"`
	MediaContent             graphql.MediaContentAddInput             `gocti:"MediaContent"             json:"MediaContent,omitempty"`
	Persona                  graphql.PersonaAddInput                  `gocti:"Persona"                  json:"Persona,omitempty"`
}

func (input StixCyberObservableAddInput) Input() (map[string]any, error) {
	output := map[string]any{}

	inputByte, err := json.Marshal(input)
	if err != nil {
		return nil, fmt.Errorf("cannot encode input: %w", err)
	}

	err = json.Unmarshal(inputByte, &output)
	if err != nil {
		return nil, fmt.Errorf("cannot decode input: %w", err)
	}

	return output, nil
}

// Implementing the [api.DeletableEntity] interface.

func (s StixCyberObservable) DeleteQueryString() string {
	return `mutation ($id: ID!) {
                stixCyberObservableEdit (id: $id) {
                    delete
                }
            }`
}

func (s StixCyberObservable) DeleteResponseField() string { return "stixCyberObservableEdit" }
