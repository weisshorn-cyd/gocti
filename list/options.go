// Code generated by '/tools/gocti_type_generator' for OpenCTI version 6.7.12 - DO NOT EDIT.

package list

import (
	"fmt"
	"time"

	"github.com/goccy/go-json"
)

const (
	defaultSearch    = ""
	defaultFirst     = 1000
	defaultAfter     = ""
	defaultOrderBy   = "created_at"
	defaultOrderMode = OrderModeAsc
)

// QueryVars is a list of parameters to configure a GraphQL List query.
// Configuration should be made via [Option] functions.
type QueryVars struct {
	// Shared variables for most Entities

	Filters   FilterGroup  `json:"filters"`
	Search    string       `json:"search,omitempty"`
	First     int          `json:"first,omitempty"`   // Number of entities per page
	After     string       `json:"after,omitempty"`   // EndCursor of previous page
	OrderBy   string       `json:"orderBy,omitempty"` // Specific to each entity
	OrderMode OrderingMode `json:"orderMode"`

	// Entity-dependent variables

	Category               string      `json:"category,omitempty"`
	Confidences            []int       `json:"confidences,omitempty"`
	DynamicFrom            FilterGroup `json:"dynamicFrom,omitempty"`
	DynamicTo              FilterGroup `json:"dynamicTo,omitempty"`
	ElementWithTargetTypes []string    `json:"elementWithTargetTypes,omitempty"`
	EndDate                *time.Time  `json:"endDate,omitempty"`
	FirstSeenStart         *time.Time  `json:"firstSeenStart,omitempty"`
	FirstSeenStop          *time.Time  `json:"firstSeenStop,omitempty"`
	FromIDList             []string    `json:"fromId,omitempty"`
	FromOrToIDList         []string    `json:"fromOrToId,omitempty"`
	FromRole               string      `json:"fromRole,omitempty"`
	FromTypes              []string    `json:"fromTypes,omitempty"`
	IncludeParents         bool        `json:"includeParents,omitempty"`
	LastSeenStart          *time.Time  `json:"lastSeenStart,omitempty"`
	LastSeenStop           *time.Time  `json:"lastSeenStop,omitempty"`
	RelationshipType       []string    `json:"relationship_type,omitempty"`
	StartDate              *time.Time  `json:"startDate,omitempty"`
	StartTimeStart         *time.Time  `json:"startTimeStart,omitempty"`
	StartTimeStop          *time.Time  `json:"startTimeStop,omitempty"`
	Stix                   bool        `json:"stix,omitempty"`
	StopTimeStart          *time.Time  `json:"stopTimeStart,omitempty"`
	StopTimeStop           *time.Time  `json:"stopTimeStop,omitempty"`
	ToIDList               []string    `json:"toId,omitempty"`
	ToRole                 string      `json:"toRole,omitempty"`
	ToStix                 bool        `json:"toStix,omitempty"`
	ToTypes                []string    `json:"toTypes,omitempty"`
	Type                   string      `json:"type,omitempty"`
	Types                  []string    `json:"types,omitempty"`
}

// Mapping converts the List Query Variables struct to a map[string]any.
func (queryVars *QueryVars) Mapping() (map[string]any, error) {
	mapping := map[string]any{}

	// Json is used instead of mapstructure to utilize the custom MarshalJSON methods.
	jsonBytes, err := json.Marshal(queryVars)
	if err != nil {
		return nil, fmt.Errorf("marshalling query vars: %w", err)
	}

	if err := json.Unmarshal(jsonBytes, &mapping); err != nil {
		return nil, fmt.Errorf("unmarshalling query vars: %w", err)
	}

	return mapping, nil
}

// NewQueryVars returns a [QueryVars] instance with default values applied.
func NewQueryVars() *QueryVars {
	// Apply default shared values
	output := &QueryVars{
		Filters:   FilterGroup{},
		Search:    defaultSearch,
		First:     defaultFirst,
		After:     defaultAfter,
		OrderBy:   defaultOrderBy,
		OrderMode: defaultOrderMode,
	}

	return output
}

// Option is a function that configures a [QueryVars] object.
type Option func(*QueryVars)

// Declarations of all the With... functions.

func WithAfter(after string) Option {
	return func(vars *QueryVars) {
		vars.After = after
	}
}

func WithCategory(category string) Option {
	return func(vars *QueryVars) {
		vars.Category = category
	}
}

func WithConfidences(confidences []int) Option {
	return func(vars *QueryVars) {
		vars.Confidences = confidences
	}
}

func WithDynamicFrom(dynamicFrom FilterGroup) Option {
	return func(vars *QueryVars) {
		vars.DynamicFrom = dynamicFrom
	}
}

func WithDynamicTo(dynamicTo FilterGroup) Option {
	return func(vars *QueryVars) {
		vars.DynamicTo = dynamicTo
	}
}

func WithElementWithTargetTypes(elementWithTargetTypes []string) Option {
	return func(vars *QueryVars) {
		vars.ElementWithTargetTypes = elementWithTargetTypes
	}
}

func WithEndDate(endDate *time.Time) Option {
	return func(vars *QueryVars) {
		vars.EndDate = endDate
	}
}

func WithFilters(filters FilterGroup) Option {
	return func(vars *QueryVars) {
		vars.Filters = filters
	}
}

func WithFirst(first int) Option {
	return func(vars *QueryVars) {
		vars.First = first
	}
}

func WithFirstSeenStart(firstSeenStart *time.Time) Option {
	return func(vars *QueryVars) {
		vars.FirstSeenStart = firstSeenStart
	}
}

func WithFirstSeenStop(firstSeenStop *time.Time) Option {
	return func(vars *QueryVars) {
		vars.FirstSeenStop = firstSeenStop
	}
}

func WithFromIDList(fromIDList []string) Option {
	return func(vars *QueryVars) {
		vars.FromIDList = fromIDList
	}
}

func WithFromOrToIDList(fromOrToIDList []string) Option {
	return func(vars *QueryVars) {
		vars.FromOrToIDList = fromOrToIDList
	}
}

func WithFromRole(fromRole string) Option {
	return func(vars *QueryVars) {
		vars.FromRole = fromRole
	}
}

func WithFromTypes(fromTypes []string) Option {
	return func(vars *QueryVars) {
		vars.FromTypes = fromTypes
	}
}

func WithIncludeParents(includeParents bool) Option {
	return func(vars *QueryVars) {
		vars.IncludeParents = includeParents
	}
}

func WithLastSeenStart(lastSeenStart *time.Time) Option {
	return func(vars *QueryVars) {
		vars.LastSeenStart = lastSeenStart
	}
}

func WithLastSeenStop(lastSeenStop *time.Time) Option {
	return func(vars *QueryVars) {
		vars.LastSeenStop = lastSeenStop
	}
}

func WithOrderBy(orderBy string) Option {
	return func(vars *QueryVars) {
		vars.OrderBy = orderBy
	}
}

func WithOrderMode(orderMode OrderingMode) Option {
	return func(vars *QueryVars) {
		vars.OrderMode = orderMode
	}
}

func WithRelationshipType(relationshipType []string) Option {
	return func(vars *QueryVars) {
		vars.RelationshipType = relationshipType
	}
}

func WithSearch(search string) Option {
	return func(vars *QueryVars) {
		vars.Search = search
	}
}

func WithStartDate(startDate *time.Time) Option {
	return func(vars *QueryVars) {
		vars.StartDate = startDate
	}
}

func WithStartTimeStart(startTimeStart *time.Time) Option {
	return func(vars *QueryVars) {
		vars.StartTimeStart = startTimeStart
	}
}

func WithStartTimeStop(startTimeStop *time.Time) Option {
	return func(vars *QueryVars) {
		vars.StartTimeStop = startTimeStop
	}
}

func WithStix(stix bool) Option {
	return func(vars *QueryVars) {
		vars.Stix = stix
	}
}

func WithStopTimeStart(stopTimeStart *time.Time) Option {
	return func(vars *QueryVars) {
		vars.StopTimeStart = stopTimeStart
	}
}

func WithStopTimeStop(stopTimeStop *time.Time) Option {
	return func(vars *QueryVars) {
		vars.StopTimeStop = stopTimeStop
	}
}

func WithToIDList(toIDList []string) Option {
	return func(vars *QueryVars) {
		vars.ToIDList = toIDList
	}
}

func WithToRole(toRole string) Option {
	return func(vars *QueryVars) {
		vars.ToRole = toRole
	}
}

func WithToStix(toStix bool) Option {
	return func(vars *QueryVars) {
		vars.ToStix = toStix
	}
}

func WithToTypes(toTypes []string) Option {
	return func(vars *QueryVars) {
		vars.ToTypes = toTypes
	}
}

func WithType(type_ string) Option {
	return func(vars *QueryVars) {
		vars.Type = type_
	}
}

func WithTypes(types []string) Option {
	return func(vars *QueryVars) {
		vars.Types = types
	}
}
